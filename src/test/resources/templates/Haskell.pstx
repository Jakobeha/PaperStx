Def = TypeDef | ValueDef

TypeDef
- data [+Type]
    [DataEq]
    [Deriving]
- type [+Type] = [Type]
- class [+Class] [+TParam] where
    [ValueDefs]

ValueDef
- [+RegValId] :: [Type]
- [+RegValId] = [Value]

ValueDefs
-
- [ValueDef] [ValueDefs]

DataEq
- = [+DataValId] [+Types]
  [DataAlt]

DataAlt
-
- | [+DataValId] [+Types]
  [DataAlt]

Deriving
-
- deriving ([Class], [Classes])

Classes
-
- [Class], [Classes]

Class
- Eq
- Ord
- Read
- Show
- Bounded
- Enum
- Functor
- Applicative
- Monad
+ {[A-Z][A-Za-z0-9']*}

Types
-
- [Type] [Types]

Type
- Int
- Bool
- Char
- String
- [[Type]]
- [Type] [Type]
- [Type] -> [Type]
- [Type] [TParams]
- [Type] [TParams] [Type]
+ {[A-Z][A-Za-z0-9']*}

Value
- [ValId]
- [Value] [Value]

ValId = RegValId | DataValId

RegValId
+ {[a-z][A-Za-z0-9']*}

DataValId
+ {[A-Z][A-Za-z0-9']*}

TParam
+ {[a-z][A-Za-z0-9']*}

TParams
-
- [TParam] [TParams]